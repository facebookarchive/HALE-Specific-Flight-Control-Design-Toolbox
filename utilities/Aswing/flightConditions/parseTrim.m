function trimstate = parseTrim(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   TRIMSTATE = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   TRIMSTATE = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   trimstate = importfile('trimstate.dat', 3, 4);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/07/19 13:50:26

%% Initialize variables.
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%1s%2s%5s%6s%14s%14s%14s%14s%3s%6s%1s%2s%5s%6s%3s%2s%3s%6s%1s%2s%4s%5s%3s%6s%5s%3s%6s%5s%3s%4s%2s%6s%2s%1s%5s%6s%2s%1s%5s%6s%2s%1s%5s%5s%3s%6s%5s%3s%4s%2s%5s%3s%8s%3s%7s%6s%3s%1s%8s%3s%7s%2s%3s%5s%9s%3s%6s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Remove white space around all cell columns.
dataArray{2} = strtrim(dataArray{2});
dataArray{3} = strtrim(dataArray{3});
dataArray{5} = strtrim(dataArray{5});
dataArray{6} = strtrim(dataArray{6});
dataArray{7} = strtrim(dataArray{7});
dataArray{8} = strtrim(dataArray{8});
dataArray{9} = strtrim(dataArray{9});
dataArray{10} = strtrim(dataArray{10});
dataArray{11} = strtrim(dataArray{11});
dataArray{12} = strtrim(dataArray{12});
dataArray{17} = strtrim(dataArray{17});
dataArray{21} = strtrim(dataArray{21});
dataArray{24} = strtrim(dataArray{24});
dataArray{27} = strtrim(dataArray{27});
dataArray{31} = strtrim(dataArray{31});
dataArray{34} = strtrim(dataArray{34});
dataArray{35} = strtrim(dataArray{35});
dataArray{38} = strtrim(dataArray{38});
dataArray{39} = strtrim(dataArray{39});
dataArray{42} = strtrim(dataArray{42});
dataArray{43} = strtrim(dataArray{43});
dataArray{46} = strtrim(dataArray{46});
dataArray{50} = strtrim(dataArray{50});
dataArray{62} = strtrim(dataArray{62});

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[4,13,14,15,16,18,19,20,22,23,25,26,28,29,30,32,33,36,37,40,41,44,45,47,48,49,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [4,13,14,15,16,18,19,20,22,23,25,26,28,29,30,32,33,36,37,40,41,44,45,47,48,49,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67]);
rawStringColumns = string(raw(:, [1,2,3,5,6,7,8,9,10,11,12,17,21,24,27,31,34,35,38,39,42,43,46,50,62]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
idx = (rawStringColumns(:, 1) == "<undefined>");
rawStringColumns(idx, 1) = "";

%% Create output variable
trimstate = table;
trimstate.VarName1 = categorical(rawStringColumns(:, 1));
trimstate.i = rawStringColumns(:, 2);
trimstate.VarName3 = rawStringColumns(:, 3);
trimstate.t = cell2mat(rawNumericColumns(:, 1));
trimstate.Flap1 = rawStringColumns(:, 4);
trimstate.Flap2 = rawStringColumns(:, 5);
trimstate.Flap3 = rawStringColumns(:, 6);
trimstate.Peng1 = rawStringColumns(:, 7);
trimstate.dUx = rawStringColumns(:, 8);
trimstate.Lacc = rawStringColumns(:, 9);
trimstate.VarName11 = rawStringColumns(:, 10);
trimstate.VarName12 = rawStringColumns(:, 11);
trimstate.dUy = cell2mat(rawNumericColumns(:, 2));
trimstate.Lacc1 = cell2mat(rawNumericColumns(:, 3));
trimstate.VarName15 = cell2mat(rawNumericColumns(:, 4));
trimstate.VarName16 = cell2mat(rawNumericColumns(:, 5));
trimstate.dUz = rawStringColumns(:, 12);
trimstate.Lacc2 = cell2mat(rawNumericColumns(:, 6));
trimstate.VarName19 = cell2mat(rawNumericColumns(:, 7));
trimstate.VarName20 = cell2mat(rawNumericColumns(:, 8));
trimstate.UX = rawStringColumns(:, 13);
trimstate.vel = cell2mat(rawNumericColumns(:, 9));
trimstate.VarName23 = cell2mat(rawNumericColumns(:, 10));
trimstate.UY = rawStringColumns(:, 14);
trimstate.vel1 = cell2mat(rawNumericColumns(:, 11));
trimstate.VarName26 = cell2mat(rawNumericColumns(:, 12));
trimstate.UZ = rawStringColumns(:, 15);
trimstate.vel2 = cell2mat(rawNumericColumns(:, 13));
trimstate.VarName29 = cell2mat(rawNumericColumns(:, 14));
trimstate.VarName30 = cell2mat(rawNumericColumns(:, 15));
trimstate.Wx = rawStringColumns(:, 16);
trimstate.rate = cell2mat(rawNumericColumns(:, 16));
trimstate.VarName33 = cell2mat(rawNumericColumns(:, 17));
trimstate.VarName34 = rawStringColumns(:, 17);
trimstate.Wy = rawStringColumns(:, 18);
trimstate.rate1 = cell2mat(rawNumericColumns(:, 18));
trimstate.VarName37 = cell2mat(rawNumericColumns(:, 19));
trimstate.VarName38 = rawStringColumns(:, 19);
trimstate.Wz = rawStringColumns(:, 20);
trimstate.rate2 = cell2mat(rawNumericColumns(:, 20));
trimstate.VarName41 = cell2mat(rawNumericColumns(:, 21));
trimstate.VarName42 = rawStringColumns(:, 21);
trimstate.RX = rawStringColumns(:, 22);
trimstate.pos = cell2mat(rawNumericColumns(:, 22));
trimstate.VarName45 = cell2mat(rawNumericColumns(:, 23));
trimstate.RY = rawStringColumns(:, 23);
trimstate.pos1 = cell2mat(rawNumericColumns(:, 24));
trimstate.VarName48 = cell2mat(rawNumericColumns(:, 25));
trimstate.VarName49 = cell2mat(rawNumericColumns(:, 26));
trimstate.RZ = rawStringColumns(:, 24);
trimstate.pos2 = cell2mat(rawNumericColumns(:, 27));
trimstate.VarName52 = cell2mat(rawNumericColumns(:, 28));
trimstate.Phi = cell2mat(rawNumericColumns(:, 29));
trimstate.VarName54 = cell2mat(rawNumericColumns(:, 30));
trimstate.VarName55 = cell2mat(rawNumericColumns(:, 31));
trimstate.Theta = cell2mat(rawNumericColumns(:, 32));
trimstate.VarName57 = cell2mat(rawNumericColumns(:, 33));
trimstate.VarName58 = cell2mat(rawNumericColumns(:, 34));
trimstate.Psi = cell2mat(rawNumericColumns(:, 35));
trimstate.VarName60 = cell2mat(rawNumericColumns(:, 36));
trimstate.VarName61 = cell2mat(rawNumericColumns(:, 37));
trimstate.V = rawStringColumns(:, 25);
trimstate.VarName63 = cell2mat(rawNumericColumns(:, 38));
trimstate.VarName64 = cell2mat(rawNumericColumns(:, 39));
trimstate.beta = cell2mat(rawNumericColumns(:, 40));
trimstate.VarName66 = cell2mat(rawNumericColumns(:, 41));
trimstate.VarName67 = cell2mat(rawNumericColumns(:, 42));


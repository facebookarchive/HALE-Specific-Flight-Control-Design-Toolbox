function AQ3timedata1 = parseTimeData(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   AQ3TIMEDATA1 = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   AQ3TIMEDATA1 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   AQ3timedata1 = importfile('AQ3_timedata1.txt', 1, 405);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/07/19 13:36:51

%% Initialize variables.
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%3s%7s%18s%10s%18s%10s%18s%14s%10s%18s%10s%18s%14s%14s%14s%10s%18s%14s%14s%14s%14s%10s%18s%10s%18s%10s%18s%10s%18s%10s%18s%14s%14s%10s%18s%14s%14s%14s%14s%10s%14s%14s%14s%14s%14s%14s%18s%10s%18s%14s%14s%10s%18s%14s%14s%14s%14s%10s%14s%14s%14s%14s%14s%14s%18s%10s%18s%14s%14s%10s%18s%14s%14s%14s%14s%10s%18s%10s%18s%10s%18s%10s%18s%10s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
AQ3timedata1 = table;
AQ3timedata1.i = cell2mat(raw(:, 1));
AQ3timedata1.t = cell2mat(raw(:, 2));
AQ3timedata1.Flap1 = cell2mat(raw(:, 3));
AQ3timedata1.Flap2 = cell2mat(raw(:, 4));
AQ3timedata1.Flap3 = cell2mat(raw(:, 5));
AQ3timedata1.Peng1 = cell2mat(raw(:, 6));
AQ3timedata1.CD = cell2mat(raw(:, 7));
AQ3timedata1.CY = cell2mat(raw(:, 8));
AQ3timedata1.CL = cell2mat(raw(:, 9));
AQ3timedata1.Cl = cell2mat(raw(:, 10));
AQ3timedata1.Cm = cell2mat(raw(:, 11));
AQ3timedata1.Cn = cell2mat(raw(:, 12));
AQ3timedata1.dUxLacc1 = cell2mat(raw(:, 13));
AQ3timedata1.dUyLacc1 = cell2mat(raw(:, 14));
AQ3timedata1.dUzLacc1 = cell2mat(raw(:, 15));
AQ3timedata1.UXvel1 = cell2mat(raw(:, 16));
AQ3timedata1.UYvel1 = cell2mat(raw(:, 17));
AQ3timedata1.UZvel1 = cell2mat(raw(:, 18));
AQ3timedata1.Wxrate1 = cell2mat(raw(:, 19));
AQ3timedata1.Wyrate1 = cell2mat(raw(:, 20));
AQ3timedata1.Wzrate1 = cell2mat(raw(:, 21));
AQ3timedata1.RXpos1 = cell2mat(raw(:, 22));
AQ3timedata1.RYpos1 = cell2mat(raw(:, 23));
AQ3timedata1.RZpos1 = cell2mat(raw(:, 24));
AQ3timedata1.Phi1 = cell2mat(raw(:, 25));
AQ3timedata1.Theta1 = cell2mat(raw(:, 26));
AQ3timedata1.Psi1 = cell2mat(raw(:, 27));
AQ3timedata1.V1 = cell2mat(raw(:, 28));
AQ3timedata1.beta1 = cell2mat(raw(:, 29));
AQ3timedata1.alpha1 = cell2mat(raw(:, 30));
AQ3timedata1.dUxLacc2 = cell2mat(raw(:, 31));
AQ3timedata1.dUyLacc2 = cell2mat(raw(:, 32));
AQ3timedata1.dUzLacc2 = cell2mat(raw(:, 33));
AQ3timedata1.UXvel2 = cell2mat(raw(:, 34));
AQ3timedata1.UYvel2 = cell2mat(raw(:, 35));
AQ3timedata1.UZvel2 = cell2mat(raw(:, 36));
AQ3timedata1.Wxrate2 = cell2mat(raw(:, 37));
AQ3timedata1.Wyrate2 = cell2mat(raw(:, 38));
AQ3timedata1.Wzrate2 = cell2mat(raw(:, 39));
AQ3timedata1.RXpos2 = cell2mat(raw(:, 40));
AQ3timedata1.RYpos2 = cell2mat(raw(:, 41));
AQ3timedata1.RZpos2 = cell2mat(raw(:, 42));
AQ3timedata1.Phi2 = cell2mat(raw(:, 43));
AQ3timedata1.Theta2 = cell2mat(raw(:, 44));
AQ3timedata1.Psi2 = cell2mat(raw(:, 45));
AQ3timedata1.V2 = cell2mat(raw(:, 46));
AQ3timedata1.beta2 = cell2mat(raw(:, 47));
AQ3timedata1.alpha2 = cell2mat(raw(:, 48));
AQ3timedata1.dUxLacc3 = cell2mat(raw(:, 49));
AQ3timedata1.dUyLacc3 = cell2mat(raw(:, 50));
AQ3timedata1.dUzLacc3 = cell2mat(raw(:, 51));
AQ3timedata1.UXvel3 = cell2mat(raw(:, 52));
AQ3timedata1.UYvel3 = cell2mat(raw(:, 53));
AQ3timedata1.UZvel3 = cell2mat(raw(:, 54));
AQ3timedata1.Wxrate3 = cell2mat(raw(:, 55));
AQ3timedata1.Wyrate3 = cell2mat(raw(:, 56));
AQ3timedata1.Wzrate3 = cell2mat(raw(:, 57));
AQ3timedata1.RXpos3 = cell2mat(raw(:, 58));
AQ3timedata1.RYpos3 = cell2mat(raw(:, 59));
AQ3timedata1.RZpos3 = cell2mat(raw(:, 60));
AQ3timedata1.Phi3 = cell2mat(raw(:, 61));
AQ3timedata1.Theta3 = cell2mat(raw(:, 62));
AQ3timedata1.Psi3 = cell2mat(raw(:, 63));
AQ3timedata1.V3 = cell2mat(raw(:, 64));
AQ3timedata1.beta3 = cell2mat(raw(:, 65));
AQ3timedata1.alpha3 = cell2mat(raw(:, 66));
AQ3timedata1.dUxLacc4 = cell2mat(raw(:, 67));
AQ3timedata1.dUyLacc4 = cell2mat(raw(:, 68));
AQ3timedata1.dUzLacc4 = cell2mat(raw(:, 69));
AQ3timedata1.UXvel4 = cell2mat(raw(:, 70));
AQ3timedata1.UYvel4 = cell2mat(raw(:, 71));
AQ3timedata1.UZvel4 = cell2mat(raw(:, 72));
AQ3timedata1.Wxrate4 = cell2mat(raw(:, 73));
AQ3timedata1.Wyrate4 = cell2mat(raw(:, 74));
AQ3timedata1.Wzrate4 = cell2mat(raw(:, 75));
AQ3timedata1.RXpos4 = cell2mat(raw(:, 76));
AQ3timedata1.RYpos4 = cell2mat(raw(:, 77));
AQ3timedata1.RZpos4 = cell2mat(raw(:, 78));
AQ3timedata1.Phi4 = cell2mat(raw(:, 79));
AQ3timedata1.Theta4 = cell2mat(raw(:, 80));
AQ3timedata1.Psi4 = cell2mat(raw(:, 81));
AQ3timedata1.V4 = cell2mat(raw(:, 82));
AQ3timedata1.beta4 = cell2mat(raw(:, 83));
AQ3timedata1.alpha4 = cell2mat(raw(:, 84));

